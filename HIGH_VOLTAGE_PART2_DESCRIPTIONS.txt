FOR EACH PART, ADDRESS THE FOLLOWING 6 THINGS:

i.	The name of the component (already listed)
ii.	The inputs and their bit-size
iii.	The outputs and their bit-size
iv.	The interfaces and their bit-size
v.	Any controls and their bit-size. (Such as Multiplexor Select)
vi.	A one-sentence description if necessary. 


Data being handled:
Two 16-bit numbers will be able to be added, subtracted, multiplied, and divided resulting in a 32-bit result
--------------------------------------------------------------------------------------------------------------------

PARTS:

i.) AND
ii.) inputs:  i - 16 bit
              j - 16 bit
iii.) output:(AND): f1 - 16 bit
iv.) none
v.) no controls
vi.) standard 16 bit AND gate.


i.) COMPARATOR
ii.) inputs:  a - 16 bit
              b - 16 bit
iii.) output: (A<B): ls - 1 bit
              (A>B): gt - 1 bit
              (A=B): eq - 1 bit
iv.) none
v.) no controls
vi.) !6 bit comparator returns in three bits if a is less than b, a is grater than b, or a equals b

i.) DIVIDER
ii.) inputs:  a - 16 bit
              b - 16 bit
iii.) outputs:  (quotient): q - 16 bit
                (remainder): r - 16 bit
iv.) none
v.) no controls
vi.) Divides a by b and gives remainder

i.) FULL ADDER
ii.) inputs:  a - 16 bit
              b - 16 bit
              Cin - 1 bit
iii.) output: (A+B): s - 16 bit
              cout - 1 bit
iv.) none
v.) no controls
vi.) Standard 16 bit full adder.

i.) SUBTRACTOR
ii.) inputs:  a - 16 bit
              b - 16 bit
iii.) output: s - 16 bit
                  cout - 1 bit
iv.) none
v.) Controls: Cin - 1 bit 
vi.) Standared 16 bit adder subtractor that is controlled by a Cin value and returns in 2s complement form during subtraction.

i.) LEFT ARBITER
ii.) inputs: r - 16 bits
iii.) output: g - 16 bits
iv.) none
v.) no controls 
vi.) Standared 16 bit left arbiter

i.) RIGHT ARBITER
ii.) inputs: r - 16 bits
iii.) output: g - 16 bits
iv.) none
v.) no controls
vi.) Standared 16 bit right arbiter

i.) MULTIPLEXOR
ii.) input: Ch3 - 32 bits
            Ch2 - 32 bits
            Ch1 - 32 bits
            Ch0 - 32 bits
iii.) output b - 32 bits
iv.) none
v.) s - 4 bit
vi.) Standared 4 to 1 multiplexor with with a 32 bit line selected.

i.) MULTIPLIER
ii.) input: a - 16 bits
            b - 16 bits
iii.) output plow -16 bits
             phigh -16 bits
iv.) none
v.) no controls
vi.) Multiplies a and b returns in the form of two 16 bit values corisponding to the highest 16 and lowes 16 bits

i.) NAND
ii.) inputs:  i - 16 bit
              j - 16 bit
iii.) output:(NAND): f1 - 16 bit
iv.) none
v.) no controls
vi.) standard 16 bit NAND gate.


i.) NOR
ii.) inputs:  i - 16 bit
              j - 16 bit
iii.) output:(NOR): f1 - 16 bit
iv.) none
v.) no controls
vi.) standard 16 bit NOR gate.

i.) OR
ii.) inputs:  i - 16 bit
              j - 16 bit
iii.) output:(OR): f1 - 16 bit
iv.) none
v.) no controls
vi.) standard 16 bit OR gate.

i.) XNOR
ii.) inputs:  i - 16 bit
              j - 16 bit
iii.) output:(XNOR): f1 - 16 bit
iv.) none
v.) no controls
vi.) standard 16 bit XNOR gate.

i.) XOR
ii.)inputs:  a - 16 bit
             b - 16 bit
iii.)output:(XOR) r - 16 bits
iv.) none
v.) no controls
vi.) standard 16 bit XOR gate


i.) DECODER
ii.)  inputs:  a- 4-bit binary
iii.) output:  b- 16-bit one-hot
iv.)  n/a
v.)   n/a
vi.)  converts a 4-bit binary number to a 16-bit one-hot


i.) ENCODER
ii.)  inputs:   a- 16-bit one-hot
iii.) output:   b- 4-bit binary
iv.)  n/a
v.)   n/a
vi.)  converts a 16-bit one-hot to a 4-bit binary
